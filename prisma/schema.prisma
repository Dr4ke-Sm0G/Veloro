// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle utilisateur
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  favorites     Favorite[]
  reviews       Review[]
  searches      SavedSearch[]
  carListings   CarListing[]
}

enum Role {
  USER
  DEALER
  ADMIN
}

model Brand {
  id     String  @id @default(cuid())
  name   String  @unique
  models Model[]
}

model Model {
  id            String            @id @default(cuid())
  name          String
  brandId       String
  brand         Brand             @relation(fields: [brandId], references: [id])

  technical     TechnicalSpec?   @relation("ModelToTechnicalSpec")
  dimensions    DimensionSpec?   @relation("ModelToDimensionSpec")
  consumption   ConsumptionSpec? @relation("ModelToConsumptionSpec")

  createdAt     DateTime          @default(now())
  variants      Variant[]
  reviews       Review[]
}



model TechnicalSpec {
  id        String @id @default(cuid())
  modelId   String @unique
  model     Model  @relation("ModelToTechnicalSpec", fields: [modelId], references: [id])
  engineType      String?
  fuelType        String?
  transmission    String?
  driveType       String?
  horsepower      String?
  torque          String?
  acceleration    String?
  topSpeed        String?
}




model DimensionSpec {
  id        String @id @default(cuid())
  modelId   String @unique
  model     Model  @relation("ModelToDimensionSpec", fields: [modelId], references: [id])
  length          String?
  width           String?
  height          String?
  wheelbase       String?
  trunkCapacity   String?
  weight          String?
  groundClearance String?
}


model ConsumptionSpec {
  id        String @id @default(cuid())
  modelId   String @unique
  model     Model  @relation("ModelToConsumptionSpec", fields: [modelId], references: [id])
  fuelConsumption  String?
  co2Emissions     String?
  emissionStandard String?
  fuelTankCapacity String?
  rangeWLTP        String?
}



// Modèle de variante de voiture
model Variant {
  id            String    @id @default(cuid())
  name          String
  model         Model     @relation(fields: [modelId], references: [id])
  modelId       String
  year          Int
  bodyType      String
  fuelType      String
  transmission  String
  price         Float
  specs         Json
  cars          Car[]
  
  @@unique([name, modelId, year])
}

// Modèle de voiture (instance spécifique)
model Car {
  id            String    @id @default(cuid())
  variant       Variant   @relation(fields: [variantId], references: [id])
  variantId     String
  condition     Condition
  mileage       Int?
  color         String?
  images        CarImage[]
  features      Feature[]
  carListings   CarListing[]
  favorites     Favorite[]
}

enum Condition {
  NEW
  USED
}

// Modèle d'image de voiture
model CarImage {
  id            String    @id @default(cuid())
  url           String
  car           Car       @relation(fields: [carId], references: [id])
  carId         String
  isPrimary     Boolean   @default(false)
}

// Modèle de caractéristique de voiture
model Feature {
  id            String    @id @default(cuid())
  name          String
  category      String
  cars          Car[]
}

// Modèle d'annonce de voiture
model CarListing {
  id            String    @id @default(cuid())
  car           Car       @relation(fields: [carId], references: [id])
  carId         String
  seller        User      @relation(fields: [sellerId], references: [id])
  sellerId      String
  price         Float
  description   String?
  status        ListingStatus
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ListingStatus {
  ACTIVE
  SOLD
  EXPIRED
}

// Modèle d'avis
model Review {
  id            String    @id @default(cuid())
  rating        Int
  title         String?
  content       String?
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  model         Model     @relation(fields: [modelId], references: [id])
  modelId       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modèle de favoris
model Favorite {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  car           Car       @relation(fields: [carId], references: [id])
  carId         String
  createdAt     DateTime  @default(now())
  
  @@unique([userId, carId])
}

// Modèle de recherche sauvegardée
model SavedSearch {
  id            String    @id @default(cuid())
  name          String?
  criteria      Json
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
}

// Modèle de concessionnaire
model Dealer {
  id            String    @id @default(cuid())
  name          String
  address       String?
  city          String?
  postcode      String?
  phone         String?
  email         String?
  website       String?
  logo          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modèle d'article de blog
model Article {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       String
  excerpt       String?
  coverImage    String?
  published     Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  categories    Category[]
}

// Modèle de catégorie d'article
model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  articles      Article[]
}