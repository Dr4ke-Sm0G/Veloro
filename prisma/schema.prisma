// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Nouveau :
  city      String?
  zip       String?
  country   String?
  location  String?

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  favorites     Favorite[]
  wishlist      Wishlist[]
  reviews       Review[]
  carListings   CarListing[]
  sessions      Session[]
  accounts      Account[]
  searches      SavedSearch[]
  notifications Notification[]
  comments      Comment[]
}


enum Role {
  USER
  DEALER
  ADMIN
}

model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String
  addedAt   DateTime @default(now())

  @@unique([userId, variantId])
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String
  createdAt DateTime @default(now())

  @@unique([userId, variantId])
}

model Review {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  model     Model    @relation(fields: [modelId], references: [id])
  modelId   String
  rating    Int
  title     String?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarListing {
  id          String        @id @default(cuid())
  seller      User          @relation(fields: [sellerId], references: [id])
  sellerId    String
  variant     Variant       @relation(fields: [variantId], references: [id])
  variantId   String
  description String?
  price       Float
  status      ListingStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ListingStatus {
  ACTIVE
  SOLD
  EXPIRED
}

model Comment {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  model     Model?   @relation(fields: [modelId], references: [id])
  modelId   String?
  articleId String? // Si tu crées un modèle Article plus tard
  createdAt DateTime @default(now())

  @@index([modelId])
  @@index([articleId])
}

model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id])
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SavedSearch {
  id        String   @id @default(cuid())
  name      String?
  criteria  Json // Filtres de recherche enregistrés (format libre)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  type      NotificationType @default(IN_APP)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  IN_APP
  EMAIL
  PUSH
}

model Message {
  id          String   @id @default(cuid())
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String
  content     String
  read        Boolean  @default(false)
  sentAt      DateTime @default(now())
}

model Brand {
  id     String  @id @default(cuid())
  name   String  @unique
  logo   String?
  slug   String  @unique
  models Model[]
}

model Model {
  id       String    @id @default(cuid())
  name     String
  brand    Brand     @relation(fields: [brandId], references: [id])
  brandId  String
  slug     String    @unique
  variants Variant[]
  reviews  Review[]
  comments Comment[]

  @@unique([name, brandId]) // ⬅️ pour que `upsert` fonctionne comme tu veux
  @@unique([slug, brandId]) // pour l'accès par URL
}

model Variant {
  id              String               @id @default(cuid())
  name            String
  model           Model                @relation(fields: [modelId], references: [id])
  modelId         String
  slug            String               @unique
  year            Int?
  bodyType        String?
  drive           String? // e.g. "FWD", "RWD", "AWD"
  wishlistEntries Wishlist[]
  favoriteEntries Favorite[]
  carListings     CarListing[]
  /// 1‑to‑1 spec relations
  batterySpec     BatterySpec?
  chargingSpec    ChargingSpec?
  performanceSpec PerformanceSpec?
  efficiencySpec  EfficiencySpec?
  realConsumption RealConsumptionSpec?
  dimensionSpec   DimensionSpec?
  safetyRating    SafetyRating?
  v2xSpec         V2XSpec?
  availability    Availability?

  /// 1‑to‑N relations
  prices Price[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, modelId, year])
}

/// ---------------------------------
/// Commercial data
/// ---------------------------------

model Price {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String

  country   String // ISO country name ("Germany")
  price     Decimal
  validFrom DateTime?
  validTo   DateTime?

  @@index([variantId, country])
}

model Availability {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @unique

  availableFrom DateTime?
  availableTo   DateTime?
}

/// ---------------------------------
/// Technical specification blocks (1‑to‑1 with Variant)
/// ---------------------------------

model BatterySpec {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @unique

  nominalCapacity   Decimal? // kWh
  useableCapacity   Decimal? // kWh
  batteryType       String?
  architecture      String? // "400 V" / "800 V"
  cathodeMaterial   String?
  packConfiguration String?
  nominalVoltage    Decimal?
  formFactor        String?
  warrantyPeriod    String?
  warrantyMileage   String?
}

model ChargingSpec {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @unique

  acPortType       String?
  acPowerKW        Decimal?
  acChargeTime     String? // formatted string "9h45m"
  acChargeSpeedKmH Int?

  dcPortType       String?
  dcMaxPowerKW     Decimal?
  dcPower10to80KW  Decimal?
  dcChargeSpeedKmH Int?

  portLocation            String?
  autochargeSupported     Boolean?
  plugAndChargeSupported  Boolean?
  iso15118Supported       Boolean?
  preconditioningPossible Boolean?
  preconditioningNav      Boolean?
}

model PerformanceSpec {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @unique

  acceleration0100Sec Decimal?
  topSpeedKmh         Int?
  electricRangeKm     Int?
  totalPowerKw        Decimal?
  totalTorqueNm       Decimal?
  drive               String?
}

model EfficiencySpec {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @unique

  rangeKm                Int?
  vehicleConsumptionWhKm Int?
  ratedConsumptionWhKm   Int?
  vehicleFuelEqL100km    Decimal?
  ratedFuelEqL100km      Decimal?
  co2EmissionsGKm        Int?
}

model RealConsumptionSpec {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @unique

  cityColdWhKm     Int?
  highwayColdWhKm  Int?
  combinedColdWhKm Int?
  cityMildWhKm     Int?
  highwayMildWhKm  Int?
  combinedMildWhKm Int?
}

model DimensionSpec {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @unique

  lengthMm             Int?
  widthMm              Int?
  widthWithMirrorsMm   Int?
  heightMm             Int?
  wheelbaseMm          Int?
  weightUnladenKg      Int?
  grossVehicleWeightKg Int?
  maxPayloadKg         Int?

  cargoVolumeL    Int?
  cargoVolumeMaxL Int?
  frunkVolumeL    Int?

  roofLoadKg             Int?
  towHitchPossible       Boolean?
  towingWeightUnbrakedKg Int?
  towingWeightBrakedKg   Int?
  verticalLoadMaxKg      Int?

  seats          Int?
  isofix         Boolean?
  turningCircleM Decimal?

  platform            String?
  evDedicatedPlatform Boolean?
  carBody             String?
  segment             String?
  roofRails           Boolean?
  heatPump            Boolean?
}

model SafetyRating {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @unique

  ratingYear             Int?
  adultOccupantPercent   Int?
  childOccupantPercent   Int?
  vulnerableRoadUsersPct Int?
  safetyAssistPercent    Int?
}

model V2XSpec {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String  @unique

  v2lSupported   Boolean?
  exteriorOutlet String?
  interiorOutlet String?
  v2hAcSupported Boolean?
  v2hDcSupported Boolean?
  v2gAcSupported Boolean?
  v2gDcSupported Boolean?
}
